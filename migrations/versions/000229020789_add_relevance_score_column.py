"""add_relevance_score_column

Revision ID: 000229020789
Revises: 3f084709490f
Create Date: 2025-04-14 11:27:35.756049

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '000229020789'
down_revision = '3f084709490f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('influencer_growth',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('influencer_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('followers_count', sa.Integer(), nullable=True),
    sa.Column('new_followers_daily', sa.Integer(), nullable=True),
    sa.Column('new_followers_weekly', sa.Integer(), nullable=True),
    sa.Column('new_followers_monthly', sa.Integer(), nullable=True),
    sa.Column('retention_rate', sa.Float(), nullable=True),
    sa.Column('churn_rate', sa.Float(), nullable=True),
    sa.Column('daily_growth_rate', sa.Float(), nullable=True),
    sa.Column('weekly_growth_rate', sa.Float(), nullable=True),
    sa.Column('monthly_growth_rate', sa.Float(), nullable=True),
    sa.Column('growth_velocity', sa.Float(), nullable=True),
    sa.Column('growth_acceleration', sa.Float(), nullable=True),
    sa.Column('projected_followers_30d', sa.Integer(), nullable=True),
    sa.Column('projected_followers_90d', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['influencer_id'], ['influencer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('influencer_reach',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('influencer_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('impressions', sa.Integer(), nullable=True),
    sa.Column('reach', sa.Integer(), nullable=True),
    sa.Column('story_views', sa.Integer(), nullable=True),
    sa.Column('profile_views', sa.Integer(), nullable=True),
    sa.Column('stories_count', sa.Integer(), nullable=True),
    sa.Column('story_engagement_rate', sa.Float(), nullable=True),
    sa.Column('story_exit_rate', sa.Float(), nullable=True),
    sa.Column('story_completion_rate', sa.Float(), nullable=True),
    sa.Column('avg_watch_time', sa.Float(), nullable=True),
    sa.Column('audience_growth', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['influencer_id'], ['influencer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('influencer_score',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('influencer_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('overall_score', sa.Float(), nullable=True),
    sa.Column('engagement_score', sa.Float(), nullable=True),
    sa.Column('reach_score', sa.Float(), nullable=True),
    sa.Column('growth_score', sa.Float(), nullable=True),
    sa.Column('consistency_score', sa.Float(), nullable=True),
    sa.Column('audience_quality_score', sa.Float(), nullable=True),
    sa.Column('engagement_weight', sa.Float(), nullable=True),
    sa.Column('reach_weight', sa.Float(), nullable=True),
    sa.Column('growth_weight', sa.Float(), nullable=True),
    sa.Column('consistency_weight', sa.Float(), nullable=True),
    sa.Column('audience_quality_weight', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['influencer_id'], ['influencer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('influencer', schema=None) as batch_op:
        batch_op.add_column(sa.Column('relevance_score', sa.Float(), nullable=True))

    # We want to keep all existing indexes, so removing the drops
    # Create indexes for the new tables
    op.create_index(op.f('ix_influencer_growth_influencer_id'), 'influencer_growth', ['influencer_id'], unique=False)
    op.create_index(op.f('ix_influencer_growth_date'), 'influencer_growth', ['date'], unique=False)
    op.create_index(op.f('ix_influencer_reach_influencer_id'), 'influencer_reach', ['influencer_id'], unique=False)
    op.create_index(op.f('ix_influencer_reach_date'), 'influencer_reach', ['date'], unique=False)
    op.create_index(op.f('ix_influencer_score_influencer_id'), 'influencer_score', ['influencer_id'], unique=False)
    op.create_index(op.f('ix_influencer_score_date'), 'influencer_score', ['date'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Since we're not dropping indexes in upgrade, we don't need to recreate them in downgrade
    # Drop indexes for the tables we'll be removing
    op.drop_index(op.f('ix_influencer_score_date'), table_name='influencer_score')
    op.drop_index(op.f('ix_influencer_score_influencer_id'), table_name='influencer_score')
    op.drop_index(op.f('ix_influencer_reach_date'), table_name='influencer_reach')
    op.drop_index(op.f('ix_influencer_reach_influencer_id'), table_name='influencer_reach')
    op.drop_index(op.f('ix_influencer_growth_date'), table_name='influencer_growth')
    op.drop_index(op.f('ix_influencer_growth_influencer_id'), table_name='influencer_growth')

    with op.batch_alter_table('influencer', schema=None) as batch_op:
        batch_op.drop_column('relevance_score')

    op.drop_table('influencer_score')
    op.drop_table('influencer_reach')
    op.drop_table('influencer_growth')
    # ### end Alembic commands ###
